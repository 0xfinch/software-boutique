#! /usr/bin/python3
# -*- coding:utf-8 -*-
#
# Copyright 2015-2017 Luke Horwell <luke@ubuntu-mate.org>
# Copyright 2015-2016 Martin Wimpress <code@flexion.org>
#
# Software Boutique is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Software Boutique is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Software Boutique. If not, see <http://www.gnu.org/licenses/>.
#

"""
    The curated software collection application for Ubuntu MATE
"""

import gi
gi.require_version("Gdk", "3.0")
gi.require_version("Gtk", "3.0")
gi.require_version("WebKit2", "4.0")
import gettext
import inspect
import locale
import os
import setproctitle
import signal
import sys
from gi.repository import GLib, Gio, GObject, Gdk, Gtk, Notify, WebKit2
from threading import Thread

try:
    import pylib.boutique as boutique
    import pylib.preferences as preferences
except ImportError:
    import software_boutique.boutique as boutique
    import software_boutique.preferences as preferences

supported_arch=["i386", "amd64", "armhf", "arm64", "powerpc", "ppc64el"]
supported_codenames=["xenial", "yakkety", "zesty"]


def get_data_source():
    """
    Retrieves the data source for assets used by the application.
    """
    current_folder = os.path.dirname( os.path.abspath(inspect.getfile(inspect.currentframe())) )
    if( os.path.exists( os.path.join(current_folder, 'data/' ) ) ):
        dbg.stdout("Using relative path for data source. Non-production testing.", 4, 1)
        data_path = os.path.join(current_folder, 'data/')
    elif( os.path.exists('/usr/share/ubuntu-mate-welcome/') ):
        dbg.stdout("Using /usr/share/ubuntu-mate-welcome/ for data source.", 4, 1)
        data_path = '/usr/share/ubuntu-mate-welcome/'
    else:
        dbg.stdout("Unable to source the ubuntu-mate-welcome data directory.", 1)
        sys.exit(1)
    return data_path


class Translations(object):
    """
    Set up i18n translations
    """
    def __init__(self):
        self.locale = None
        self.locale_path = None

        # Determine which locale to use
        if dbg.override_locale:
            self.locale = dbg.override_locale
        else:
            self.locale = str(locale.getlocale()[0])

        # Use relative translations for development.
        if os.path.exists(os.path.join(data_source, '../locale/')):
            dbg.stdout("Using relative path for translations.", 4, 1)
            self.locale_path = os.path.join(data_source, '../locale/')
        else:
            dbg.stdout("Using system path for translations or falling back to 'en_US'.", 4, 1)
            self.locale_path = '/usr/share/locale/'

        # Initialise i18n
        global _
        t = gettext.translation('software-boutique', localedir=self.locale_path, fallback=True)
        _ = t.gettext


class WebView(WebKit2.WebView):
    """
    Setting up the program's web browser and processing WebKit operations
    """
    def __init__(self):
        self.webkit = WebKit2
        self.webkit.WebView.__init__(self)

        # Connect signals to application
        self.connect('notify::title', self._on_title_change)
        self.connect('context-menu', self._on_context_menu)
        self.connect('load-changed', self.on_finish_load)

        # Enable keyboard navigation
        self.get_settings().set_enable_spatial_navigation(True)
        self.get_settings().set_enable_caret_browsing(True)

        # Show console messages in stdout if we're debugging.
        if dbg.verbose_level == 2:
            self.get_settings().set_enable_write_console_messages_to_stdout(True)


    def update_page(self, element, function, parm1=None, parm2=None):
        """ Runs a JavaScript jQuery function on the page,
            ensuring correctly parsed quotes. """
        if parm1 and parm2:
            self.run_javascript('$("' + element + '").' + function + "('" + parm1.replace("'", '\\\'') + "', '" + parm2.replace("'", '\\\'') + "')")
        if parm1:
            self.run_javascript('$("' + element + '").' + function + "('" + parm1.replace("'", '\\\'') + "')")
        else:
            self.run_javascript('$("' + element + '").' + function + '()')

    """ Callback: Page changed """
    def on_finish_load(self, view, frame):
        if not self.is_loading():
            dbg.stdout("Initalisation finished.", 3, 1)
            app.start_loading()

    def _on_title_change(self, view, frame):
        title = self.get_title()
        if title != 'null' and title != '' and title != None:
            dbg.stdout("Command: '{0}'".format(title), 3, 2)
            app.process_command(title)

    def _on_context_menu(self, webview, menu, event, htr, user_data=None):
        # Disable context menu.
        return True


class ApplicationWindow(object):
    """
    Main thread for building and interacting with the application.
    """
    def __init__(self):
        self.webview = None

    def build(self, webview_obj):
        title = _("Software Boutique")
        width = 900
        height = 600
        index_file = 'boutique.html'

        w = Gtk.Window()
        w.set_position(Gtk.WindowPosition.CENTER)
        w.set_wmclass('software-boutique', 'software-boutique')
        w.set_title(title)
        w.set_icon_from_file(os.path.join(data_source, 'img', 'boutique-icon.svg'))

        # http://askubuntu.com/questions/153549/how-to-detect-a-computers-physical-screen-size-in-gtk
        s = Gdk.Screen.get_default()
        if s.get_height() <= 600:
            w.set_size_request(768, 528)
        else:
            w.set_size_request(width, height)

        self.webkit = webview_obj

        # Load the starting page
        index_path = 'file://' + os.path.abspath(os.path.join(data_source, index_file))
        self.webkit.load_uri(index_path)

        # Build scrolled window widget and add our appview container
        sw = Gtk.ScrolledWindow()
        sw.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        sw.add(self.webkit)

        # Build an autoexpanding box and add our scrolled window
        b = Gtk.VBox(homogeneous=False, spacing=0)
        b.pack_start(sw, expand=True, fill=True, padding=0)

        # Add the box to the parent window
        w.add(b)
        w.connect('delete-event', self._close)
        w.show_all()

    def run(self):
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        Gtk.main()

    def _close(self, window, event):
        shutdown()


class SoftwareBoutique(object):
    """
    "app" object that stores variables and shared data/functions
    throughout the program.
    """
    def __init__(self):
        self.webkit = None
        self.update_page = None

        # Hardware Environment
        self.current_arch = "unknown" # E.g. amd64

        # OS Environment
        self.current_os_version = "unknown" # E.g. 16.04
        self.current_os_codename = "unknown" # E.g. xenial

        # Software Environment
        self.is_ubuntu_mate = True
        self.boutique_ppa_enabled = False
        self.internet_connected = False

        # User Preferences
        self.advanced_mode = True

    def process_command(self, cmd):
        if cmd == 'init-boutique':
            self.start_loading()
        elif cmd == 'exit':
            shutdown()

    def override_for_debugging(self):
        if dbg.override_arch:
            self.current_arch = dbg.override_arch
        if dbg.override_codename:
            self.current_os_codename = dbg.override_codename
        if dbg.override_internet_on == True:
            self.internet_connected = True
        if dbg.override_internet_on == False:
            self.internet_connected = False

    def start_loading(self):
        # Assume we're using Ubuntu MATE unless the metapackages are not present.
        print('fixme:is_ubuntu_mate')

        # Adapt header/footer to current theme.
        self.set_base_ui_theme()

        # Check whether Welcome/Boutique PPA is present.
        # -- This is our way of ensuring the user gets up-to-date listings.
        ppa_file = '/etc/apt/sources.list.d/ubuntu-mate-dev-ubuntu-welcome-' + self.current_os_codename + '.list'
        if os.path.exists(ppa_file):
            if os.path.getsize(ppa_file) > 0:
                self.boutique_ppa_enabled = True

        # Prepare user cache folder
        pref.init_cache()

        # Advanced mode shows more verbose details.
        def loading_update_state(string, verbose_only=False, progress_shown=False, progress_val=0, progress_max=1):
            if verbose_only and not self.advanced_mode:
                return
            app.update_page("#init-text", "html", string)
            if progress_shown:
                app.update_page("#init-progress-bar", "show")
                percent = int((progress_val / progress_max) * 100) + "%"
                app.update_page("#init-progress-value", "style", "width", percent)

        loading_update_state(_("Populating applications..."))

        ############################################
        # Prepare Categories
        ############################################
        loading_update_state(_("Preparing categories..."), True)

        def add_category(internal_name, human_name):
            # Categories Selection Page
            html = "<div id=\"category-{1}\" class=\"category\">" + \
                        "<a onclick=\"changeCategory('{1}', '{2}')\">" + \
                            "<div class=\"option\">" + \
                                "<img src=\"{0}/categories/{1}.svg\"/> <label>{2}</label>" + \
                            "</div>" + \
                            "<div id=\"category-preview-{1}\" class=\"app-previews\"></div>" + \
                        "</a>" + \
                    "</div>"
            html = html.replace('{0}', data_source).replace('{1}', internal_name).replace('{2}', human_name)
            self.update_page("#categories-page", "append", html)

        add_category('start-page', _("Start Page"))
        add_category('accessories', _("Accessories"))
        add_category('education', _("Education"))
        add_category('games', _("Games"))
        add_category('graphics', _("Graphics"))
        add_category('internet', _("Internet"))
        add_category('office', _("Office"))
        add_category('development', _("Programming"))
        add_category('multimedia', _("Sound & Video"))
        add_category('system', _("System Tools"))
        add_category('accessibility', _("Universal Access"))
        add_category('server', _("Servers"))
        add_category('more-software', _("More Software"))
        add_category('fixes', _("Fixes"))

        # Set default starting category
        self.update_page("#current-category-icon", "attr", "src", data_source + "/categories/accessories.svg")

        ############################################
        # Push UI strings to translate
        ############################################

        ############################################
        # Stock the Boutique Apps
        ############################################

        index = boutique.IndexMeta(dbg, data_source + "applications.json")
        index.read_index()
        a = index.read_info("Accessories", "pluma")

    def set_base_ui_theme(self):
        """
        Adjusts the colours for other (MATE default) themes.
        """
        if self.is_ubuntu_mate:
            try:
                dconf = Gio.Settings.new('org.mate.interface')
                theme = str(dconf.get_value('gtk-theme')).strip("'")
            except:
                theme = 'Ambiant-MATE'
        else:
            theme = 'Ambiant-MATE'

        # Adapt the header/footer if a different theme is in use.
        def light_theme():
            self.update_page('#header', 'css', 'color', 'black')
            self.update_page('#header a', 'css', 'color', 'black')
            self.update_page('#footer', 'css', 'color', 'black')
            self.update_page('#footer a', 'css', 'color', 'black')
            #~ self.update_page('.btn-inverse', 'removeClass', 'btn-inverse')

        if theme == 'BlackMATE':
            self.update_page('#header', 'css', 'background-color', '#3D3D3F')
            self.update_page('#footer', 'css', 'background-color', '#3D3D3F')
        elif theme == 'BlueMenta':
            self.update_page('#header', 'css', 'background-color', '#D2D2D2')
            self.update_page('#footer', 'css', 'background-color', '#D2D2D2')
            light_theme()
        elif theme == 'Blue-Submarine':
            self.update_page('#header', 'css', 'background-color', '#2C404F')
            self.update_page('#footer', 'css', 'background-color', '#2C404F')
        elif theme == 'GreenLaguna':
            self.update_page('#header', 'css', 'background-color', '#EAF0E8')
            self.update_page('#footer', 'css', 'background-color', '#EAF0E8')
            light_theme()
        elif theme == 'ContrastHigh':
            self.update_page('#header', 'css', 'background-color', 'white')
            self.update_page('#footer', 'css', 'background-color', 'white')
            light_theme()
        elif theme == 'ContrastHighInverse':
            self.update_page('#header', 'css', 'background-color', 'black')
            self.update_page('#footer', 'css', 'background-color', 'black')
        elif theme == 'Menta':
            self.update_page('#header', 'css', 'background-color', '#D2D2D2')
            self.update_page('#footer', 'css', 'background-color', '#D2D2D2')
            light_theme()
        elif theme == 'Radiant-MATE':
            self.update_page('#header', 'css', 'background-color', '#DFD7CF')
            self.update_page('#footer', 'css', 'background-color', '#DFD7CF')
            light_theme()
        elif theme == 'TraditionalGreen' or theme == 'TraditionalOk':
            self.update_page('#header', 'css', 'background-color', '#E7E6E5')
            self.update_page('#footer', 'css', 'background-color', '#E7E6E5')
            light_theme()
        elif theme == 'TraditionalOkTest':
            self.update_page('#header', 'css', 'background-color', '#868883')
            self.update_page('#footer', 'css', 'background-color', '#868883')
        return


class QueueOperationsThread(object):
    """
    Thread that monitors the queue and performs install operations
    or update the UI.
    """
    def __init__(self):
        return

    # e.g. desktop notifications function
    # e.g. toast function




class Debugging(object):
    """
    Parses parameters and outputs helpful debugging information to the terminal.
    """
    def __init__(self):
        self.verbose_level = 0
        self.override_arch = None
        self.override_codename = None
        self.override_internet_on = None
        self.override_locale = None
        self.simulate_only = None

    def parse_parameters(self):
        for arg in sys.argv:
            if arg in ['-h', '--help']:
                print("\nSoftware Boutique Parameters\n\n")
                print("\nUsage: software-boutique [arguments]")
                #     | Command                      | Help Text                                     |
                print("  -h, --help                   Show this help text.")
                print("  --arch=ARCH                  Show listings for a specific architecture.")
                print("                                -- Examples: i386, amd64, powerpc, armhf")
                print("  --codename=CODENAME          Show listings for a specific release.")
                print("                                -- Examples: trusty, xenial, zesty")
                print("  --force-net                  Force an internet connection to be present.")
                print("  --force-no-net               Force no internet connection.")
                print("  --locale=CODE                Locale to use. e.g. fr_FR.")
                print("  --simulate                   Simulate software package changes without")
                print("                               modifying the system.")
                print("  -v, --verbose                Show details to stdout (for diagnosis).")
                print("  -vv, --debug                 Show more details to stdout (for debugging).")

            elif arg.startswith('--arch'):
                self.override_arch = arg.split("--arch=")[1]
                dbg.stdout("Showing listings for arch: " + self.override_arch, 4)

            elif arg.startswith('--codename'):
                self.override_codename = arg.split("--codename=")[1]
                dbg.stdout("Showing listings for release: " + self.override_codename, 4)

            elif arg == '--force-net':
                self.override_internet_on = True
                dbg.stdout("Forcing internet connection.", 4)

            elif arg == '--force-no-net':
                self.override_internet_on = False
                dbg.stdout("Forcing no internet connection.", 4)

            elif arg.startswith('locale'):
                self.override_locale = arg.split("--locale=")[1]
                dbg.stdout("Forcing locale: " + self.override_locale, 4)

            elif arg == '--simulate':
                self.simulate_only = True
                dbg.stdout("Starting in simulation mode...", 4)

            elif arg in ['-v', '--verbose']:
                self.verbose_level = 1

            elif arg in ['-vv', '-d', '--debug']:
                self.verbose_level = 2

    def stdout(self, msg, color=0, verbosity=0):
        # msg           String containing message for stdout.
        #
        # color         0 = Default (white text)
        #               1 = Error (red)
        #               2 = Warning (yellow)
        #               3 = Success (green)
        #               4 = Info (blue)
        #
        # verbosity     0 = Always shown
        #               1 = -v flag
        #               2 = -vv flag

        # Only colourise output if running in a real terminal.
        if sys.stdout.isatty():
            if color == 1:            # Failure (Red)
                col_start = '\033[91m'
            elif color == 2:          # Success (Green)
                col_start = '\033[92m'
            elif color == 3:          # Action (Yellow)
                col_start = '\033[93m'
            elif color == 4:          # Debug (Blue)
                col_start = '\033[96m'
            else:                        # Normal/Misc (White)
                col_start = '\033[0m'
            col_end = '\033[0m'

        # Ignore colours when redirected or piped.
        else:
            col_start = ''
            col_end   = ''

        # Output the message
        if self.verbose_level >= verbosity:
            print(col_start + msg + col_end)


def shutdown():
    """
    Quit the application gracefully.
    """
    dbg.stdout("Closing Software Boutique...", 4, 1)
    Gtk.main_quit()
    sys.exit(0)


if __name__ == "__main__":
    dbg = Debugging()
    dbg.parse_parameters()
    data_source = get_data_source()
    trans = Translations()
    pref = preferences.Preferences(dbg)

    # Prepare multi-threaded operations
    queue_operations = Thread(target=QueueOperationsThread, args=())
    for thread in [queue_operations]:
        thread.daemon = True
        thread.start()

    # On this thread
    app = SoftwareBoutique()
    webview = WebView()
    main = ApplicationWindow()
    main.build(webview)
    app.webkit = webview
    app.update_page = webview.update_page
    main.run()
